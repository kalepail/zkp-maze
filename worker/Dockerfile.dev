# syntax=docker/dockerfile:1
# Development Dockerfile for Apple Silicon (ARM64)

############################
# 1) Build Rust server     #
############################
FROM --platform=linux/arm64 rust:1.90.0-slim-bookworm AS build
WORKDIR /app

ARG VERSION=2.0.7

# Install minimal build dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends pkg-config && \
    rm -rf /var/lib/apt/lists/*

# Cache dependencies (including Cargo.lock for reproducibility)
COPY container_src/Cargo.toml container_src/Cargo.lock ./
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src

# Build application
COPY container_src/src ./src
RUN touch src/main.rs && \
    cargo build --release --target aarch64-unknown-linux-gnu


##################################
# 2) Install bb (ARM64)          #
##################################
FROM --platform=linux/arm64 ubuntu:24.04 AS bb-tools

# Minimal deps for download
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl ca-certificates tar && \
    update-ca-certificates && \
    rm -rf /var/lib/apt/lists/*

# Download ARM64 barretenberg binary
ARG BB_VERSION=0.85.0
RUN curl -fsSL "https://github.com/AztecProtocol/aztec-packages/releases/download/v${BB_VERSION}/barretenberg-arm64-linux.tar.gz" -o /tmp/bb.tar.gz && \
    tar -xzf /tmp/bb.tar.gz -C /usr/local/bin && \
    rm /tmp/bb.tar.gz && \
    chmod +x /usr/local/bin/bb


#############################
# 3) Final runtime          #
#############################
# Use Ubuntu 24.04 for runtime (required for GLIBC 2.38+ and GLIBCXX 3.4.31+)
# 32a6b75ef0665160dd86b7430ec54e3fd8adb64   21MB (virtual 196MB) ubuntu:24.04
# 32a6b75ef0665160dd86b7430ec54e3fd8adb64   21MB (virtual 212MB) debian:trixie-slim
FROM --platform=linux/arm64 ubuntu:24.04

# Install runtime dependencies for bb
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl ca-certificates jq && \
    rm -rf /var/lib/apt/lists/*

# App binary
COPY --from=build /app/target/aarch64-unknown-linux-gnu/release/noir-container /server

# bb binary
COPY --from=bb-tools /usr/local/bin/bb /usr/local/bin/bb

# Circuit bytecode and CRS files
WORKDIR /app
COPY container_src/circuit.json /app/circuit.json
COPY container_src/circuit.gz /tmp/circuit.gz
COPY container_src/.bb-crs /root/.bb-crs

# Warmup: Pre-download CRS and warm caches at build time
#
# Why: Barretenberg downloads large CRS (Common Reference String) files on first use.
#      Without this, the first request takes 15s, second takes 10s (cache warming).
#      This warmup step uses pre-downloaded CRS files and warms caches at build time.
#
# How: Run a real proof generation with actual witness data
#      - May succeed or fail depending on witness validity (both are fine)
#      - CRS files are already in /root/.bb-crs from COPY above
#      - Subsequent containers start with CRS already cached
#
# Result: Eliminates slow first/second requests. Consistent ~5s performance from start.
RUN timeout 30 bb prove -b /app/circuit.json -w /tmp/circuit.gz -o /tmp -c /root/.bb-crs && \
    rm -rf /tmp/circuit.gz /tmp/proof /tmp/public_inputs

# Note: /tmp directory exists in distroless, and our Rust app creates /tmp/bb-proofs at startup
# Note: Health checks should be configured at orchestration level (e.g., Docker Compose, K8s)
#       using the /api/health endpoint since distroless has no shell/curl for HEALTHCHECK

EXPOSE 8080

CMD ["/server"]
